#!/usr/bin/env tsx

/**
 * Analyze third-party impact on nicovideo.jp and goal.com
 */

import { executeL2ThirdPartyImpact } from './dist/tools/l2-third-party-impact.js';

async function analyzeSite(url: string, siteName: string) {
  console.log(`\n${'='.repeat(60)}`);
  console.log(`  ${siteName} (${url})`);
  console.log(`${'='.repeat(60)}\n`);

  try {
    // Step 1: Analyze third-party scripts
    console.log('üìä Analyzing third-party scripts...\n');
    const analysisResult = await executeL2ThirdPartyImpact({
      url,
      device: 'mobile',
      compareMode: 'analyze',
      gather: true,
    });

    if (analysisResult.analysis) {
      const { summary, entities, impact } = analysisResult.analysis;
      
      console.log('üìà Summary:');
      console.log(`   ‚Ä¢ Third-party entities: ${summary.entityCount}`);
      console.log(`   ‚Ä¢ Total blocking time: ${Math.round(summary.totalBlockingTime)}ms`);
      console.log(`   ‚Ä¢ Total main thread time: ${Math.round(summary.totalMainThreadTime)}ms`);
      console.log(`   ‚Ä¢ Total transfer size: ${Math.round(summary.totalTransferSize / 1024)}KB`);
      console.log();

      console.log('üéØ Estimated Impact:');
      console.log(`   ‚Ä¢ Performance score impact: ${(impact.performanceScore * 100).toFixed(1)}%`);
      console.log(`   ‚Ä¢ FCP impact: ${(impact.fcpImpact * 100).toFixed(1)}%`);
      console.log(`   ‚Ä¢ LCP impact: ${(impact.lcpImpact * 100).toFixed(1)}%`);
      console.log(`   ‚Ä¢ TBT impact: ${(impact.tbtImpact * 100).toFixed(1)}%`);
      console.log();

      console.log('üî• Top 5 Performance Offenders:');
      entities.slice(0, 5).forEach((entity, i) => {
        const blockingRatio = entity.blockingTime / entity.mainThreadTime;
        console.log(`   ${i + 1}. ${entity.entity}`);
        console.log(`      ‚Ä¢ Blocking: ${Math.round(entity.blockingTime)}ms (${(blockingRatio * 100).toFixed(1)}% of main thread)`);
        console.log(`      ‚Ä¢ Transfer: ${Math.round(entity.transferSize / 1024)}KB`);
        console.log(`      ‚Ä¢ Scripts: ${entity.subRequests.length}`);
      });
      console.log();

      // Get high-impact domains for testing
      const highImpactDomains: string[] = [];
      for (const entity of entities.slice(0, 3)) {
        for (const subRequest of entity.subRequests.slice(0, 3)) {
          try {
            const requestUrl = new URL(subRequest.url);
            if (!highImpactDomains.includes(requestUrl.hostname)) {
              highImpactDomains.push(requestUrl.hostname);
            }
          } catch {}
        }
      }

      if (highImpactDomains.length > 0) {
        console.log('üö´ Testing with blocking top domains...\n');
        console.log(`   Blocking: ${highImpactDomains.slice(0, 5).join(', ')}`);
        if (highImpactDomains.length > 5) {
          console.log(`   ... and ${highImpactDomains.length - 5} more`);
        }
        console.log();

        // Compare with blocking
        const compareResult = await executeL2ThirdPartyImpact({
          url,
          device: 'mobile',
          compareMode: 'compare',
          blockDomains: highImpactDomains.slice(0, 10),
          gather: true,
        });

        if (compareResult.comparison) {
          const { baseline, withThirdParty, impact: compareImpact } = compareResult.comparison;
          
          console.log('‚ö° Performance Comparison:');
          console.log('   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
          console.log('   ‚îÇ Metric       ‚îÇ With 3P     ‚îÇ Without 3P   ‚îÇ');
          console.log('   ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
          console.log(`   ‚îÇ Score        ‚îÇ ${(withThirdParty.score * 100).toFixed(0).padEnd(11)} ‚îÇ ${(baseline.score * 100).toFixed(0).padEnd(12)} ‚îÇ`);
          console.log(`   ‚îÇ FCP (ms)     ‚îÇ ${withThirdParty.fcp.toFixed(0).padEnd(11)} ‚îÇ ${baseline.fcp.toFixed(0).padEnd(12)} ‚îÇ`);
          console.log(`   ‚îÇ LCP (ms)     ‚îÇ ${withThirdParty.lcp.toFixed(0).padEnd(11)} ‚îÇ ${baseline.lcp.toFixed(0).padEnd(12)} ‚îÇ`);
          console.log(`   ‚îÇ TBT (ms)     ‚îÇ ${withThirdParty.tbt.toFixed(0).padEnd(11)} ‚îÇ ${baseline.tbt.toFixed(0).padEnd(12)} ‚îÇ`);
          console.log(`   ‚îÇ CLS          ‚îÇ ${withThirdParty.cls.toFixed(3).padEnd(11)} ‚îÇ ${baseline.cls.toFixed(3).padEnd(12)} ‚îÇ`);
          console.log('   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
          console.log();
          
          console.log('üìä Impact Summary:');
          const scoreImprovement = compareImpact.scoreDelta * 100;
          console.log(`   ‚Ä¢ Score: ${scoreImprovement > 0 ? '+' : ''}${scoreImprovement.toFixed(0)} points`);
          console.log(`   ‚Ä¢ FCP: ${compareImpact.fcpDelta > 0 ? '+' : ''}${Math.round(compareImpact.fcpDelta)}ms`);
          console.log(`   ‚Ä¢ LCP: ${compareImpact.lcpDelta > 0 ? '+' : ''}${Math.round(compareImpact.lcpDelta)}ms`);
          console.log(`   ‚Ä¢ TBT: ${compareImpact.tbtDelta > 0 ? '+' : ''}${Math.round(compareImpact.tbtDelta)}ms`);
          
          if (scoreImprovement > 10) {
            console.log(`\n   üéâ Significant improvement potential: ${scoreImprovement.toFixed(0)} points!`);
          } else if (scoreImprovement > 5) {
            console.log(`\n   ‚úÖ Moderate improvement potential: ${scoreImprovement.toFixed(0)} points`);
          } else {
            console.log(`\n   ‚ÑπÔ∏è  Minor improvement potential: ${scoreImprovement.toFixed(0)} points`);
          }
        }
      }

      if (analysisResult.recommendations) {
        console.log('\nüí° Recommendations:');
        analysisResult.recommendations.slice(0, 5).forEach(rec => {
          console.log(`   ‚Ä¢ ${rec}`);
        });
      }
    }

  } catch (error) {
    console.error(`‚ùå Error analyzing ${siteName}:`, error);
  }
}

async function main() {
  console.log('üöÄ Third-Party Script Impact Analysis\n');
  console.log('Analyzing two sites: nicovideo.jp and goal.com');
  console.log('This will take several minutes...\n');

  // Analyze nicovideo.jp
  await analyzeSite('https://www.nicovideo.jp/', '„Éã„Ç≥„Éã„Ç≥ÂãïÁîª');

  // Analyze goal.com
  await analyzeSite('https://www.goal.com/', 'Goal.com');

  console.log(`\n${'='.repeat(60)}`);
  console.log('  Analysis Complete');
  console.log(`${'='.repeat(60)}\n`);
}

main().catch(console.error);